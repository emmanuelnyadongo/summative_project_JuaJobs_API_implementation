# Generated by Django 4.2.7 on 2025-07-05 14:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('client', 'Client'), ('worker', 'Worker'), ('admin', 'Admin')], default='worker', help_text='Type of user: client, worker, or admin', max_length=10)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for contact and verification', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('profile_picture', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='profile_pictures/')),
                ('date_of_birth', models.DateField(blank=True, help_text='User date of birth', null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], help_text='User gender', max_length=20, null=True)),
                ('country', models.CharField(blank=True, help_text='User country', max_length=100)),
                ('city', models.CharField(blank=True, help_text='User city', max_length=100)),
                ('address', models.TextField(blank=True, help_text='User address')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user has been verified')),
                ('is_active_worker', models.BooleanField(default=True, help_text='Whether the worker is currently active')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Worker hourly rate in local currency', max_digits=10, null=True)),
                ('bio', models.TextField(blank=True, help_text='Worker bio/description')),
                ('years_of_experience', models.PositiveIntegerField(blank=True, help_text='Years of work experience', null=True)),
                ('company_name', models.CharField(blank=True, help_text='Company name for client users', max_length=200)),
                ('company_description', models.TextField(blank=True, help_text='Company description for client users')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings for workers', max_digits=12)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount spent by clients', max_digits=12)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating from reviews', max_digits=3)),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text='Total number of reviews received')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('notification_preferences', models.JSONField(default=dict, help_text='User notification preferences')),
                ('language_preference', models.CharField(default='en', help_text='User language preference', max_length=10)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Job title', max_length=200)),
                ('description', models.TextField(help_text='Detailed job description')),
                ('job_type', models.CharField(choices=[('hourly', 'Hourly'), ('fixed', 'Fixed Price'), ('recurring', 'Recurring')], default='fixed', help_text='Type of job payment', max_length=20)),
                ('experience_level', models.CharField(choices=[('entry', 'Entry Level'), ('intermediate', 'Intermediate'), ('expert', 'Expert')], default='entry', help_text='Required experience level', max_length=20)),
                ('budget_min', models.DecimalField(decimal_places=2, help_text='Minimum budget for the job', max_digits=10)),
                ('budget_max', models.DecimalField(decimal_places=2, help_text='Maximum budget for the job', max_digits=10)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Hourly rate for hourly jobs', max_digits=10, null=True)),
                ('estimated_hours', models.PositiveIntegerField(blank=True, help_text='Estimated hours for hourly jobs', null=True)),
                ('required_skills', models.JSONField(default=list, help_text='List of required skills')),
                ('preferred_skills', models.JSONField(default=list, help_text='List of preferred skills')),
                ('is_remote', models.BooleanField(default=False, help_text='Whether the job can be done remotely')),
                ('location', models.CharField(blank=True, help_text='Job location', max_length=200)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Location latitude', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Location longitude', max_digits=9, null=True)),
                ('deadline', models.DateTimeField(blank=True, help_text='Job deadline', null=True)),
                ('start_date', models.DateTimeField(blank=True, help_text='Expected start date', null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='open', help_text='Current job status', max_length=20)),
                ('views_count', models.PositiveIntegerField(default=0, help_text='Number of job views')),
                ('applications_count', models.PositiveIntegerField(default=0, help_text='Number of applications received')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(auto_now_add=True)),
                ('attachments', models.JSONField(default=list, help_text='List of file attachments')),
                ('tags', models.JSONField(default=list, help_text='Job tags for search')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether the job is featured')),
                ('is_urgent', models.BooleanField(default=False, help_text='Whether the job is urgent')),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover_letter', models.TextField(help_text='Cover letter explaining why the worker is suitable')),
                ('proposed_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Worker proposed rate for the job', max_digits=10, null=True)),
                ('estimated_duration', models.PositiveIntegerField(blank=True, help_text='Estimated duration in hours', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewing', 'Reviewing'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='pending', help_text='Application status', max_length=20)),
                ('client_message', models.TextField(blank=True, help_text='Message from client to worker')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attachments', models.JSONField(default=list, help_text='List of file attachments')),
            ],
            options={
                'verbose_name': 'Job Application',
                'verbose_name_plural': 'Job Applications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the category is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Job Category',
                'verbose_name_plural': 'Job Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Location name', max_length=200)),
                ('location_type', models.CharField(choices=[('country', 'Country'), ('state', 'State/Province'), ('city', 'City'), ('district', 'District'), ('neighborhood', 'Neighborhood')], help_text='Type of location', max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Location latitude', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Location longitude', max_digits=9, null=True)),
                ('country_code', models.CharField(blank=True, help_text='ISO country code', max_length=3)),
                ('timezone', models.CharField(blank=True, help_text='Timezone for this location', max_length=50)),
                ('population', models.PositiveIntegerField(blank=True, help_text='Population of the location', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the location is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('job_application', 'Job Application'), ('job_accepted', 'Job Accepted'), ('job_rejected', 'Job Rejected'), ('job_completed', 'Job Completed'), ('payment_received', 'Payment Received'), ('payment_sent', 'Payment Sent'), ('review_received', 'Review Received'), ('message_received', 'Message Received'), ('system_update', 'System Update'), ('security_alert', 'Security Alert'), ('promotional', 'Promotional')], help_text='Type of notification', max_length=30)),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('message', models.TextField(help_text='Notification message')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Notification priority', max_length=10)),
                ('is_read', models.BooleanField(default=False, help_text='Whether the notification has been read')),
                ('is_sent', models.BooleanField(default=False, help_text='Whether the notification has been sent')),
                ('related_job_id', models.PositiveIntegerField(blank=True, help_text='Related job ID', null=True)),
                ('related_user_id', models.PositiveIntegerField(blank=True, help_text='Related user ID', null=True)),
                ('related_payment_id', models.CharField(blank=True, help_text='Related payment ID', max_length=100)),
                ('data', models.JSONField(default=dict, help_text='Additional notification data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, help_text='When notification was read', null=True)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When notification was sent', null=True)),
                ('delivery_methods', models.JSONField(default=list, help_text='Methods used to deliver notification (email, push, sms)')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(help_text='Unique payment identifier', max_length=100, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=12)),
                ('currency', models.CharField(default='USD', help_text='Payment currency', max_length=3)),
                ('payment_type', models.CharField(choices=[('job_payment', 'Job Payment'), ('escrow_deposit', 'Escrow Deposit'), ('escrow_release', 'Escrow Release'), ('refund', 'Refund'), ('withdrawal', 'Withdrawal'), ('platform_fee', 'Platform Fee')], help_text='Type of payment', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', help_text='Payment status', max_length=20)),
                ('platform_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Platform fee amount', max_digits=12)),
                ('net_amount', models.DecimalField(decimal_places=2, help_text='Net amount after fees', max_digits=12)),
                ('external_transaction_id', models.CharField(blank=True, help_text='External payment provider transaction ID', max_length=100)),
                ('external_payment_data', models.JSONField(default=dict, help_text='Additional data from external payment provider')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When payment was processed', null=True)),
                ('description', models.TextField(blank=True, help_text='Payment description')),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for payment failure')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('mobile_money', 'Mobile Money'), ('bank_transfer', 'Bank Transfer'), ('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('digital_wallet', 'Digital Wallet'), ('cash', 'Cash')], help_text='Type of payment method', max_length=20)),
                ('provider', models.CharField(choices=[('mpesa', 'M-Pesa'), ('airtel_money', 'Airtel Money'), ('orange_money', 'Orange Money'), ('mtn_mobile_money', 'MTN Mobile Money'), ('visa', 'Visa'), ('mastercard', 'Mastercard'), ('paypal', 'PayPal'), ('stripe', 'Stripe')], help_text='Payment provider', max_length=30)),
                ('account_number', models.CharField(blank=True, help_text='Account number or phone number', max_length=50)),
                ('account_name', models.CharField(blank=True, help_text='Account holder name', max_length=200)),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default payment method')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this payment method is verified')),
                ('bank_name', models.CharField(blank=True, help_text='Bank name for bank transfers', max_length=100)),
                ('branch_code', models.CharField(blank=True, help_text='Bank branch code', max_length=20)),
                ('card_last_four', models.CharField(blank=True, help_text='Last four digits of card', max_length=4)),
                ('card_expiry_month', models.PositiveIntegerField(blank=True, help_text='Card expiry month', null=True)),
                ('card_expiry_year', models.PositiveIntegerField(blank=True, help_text='Card expiry year', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_type', models.CharField(choices=[('client_to_worker', 'Client to Worker'), ('worker_to_client', 'Worker to Client')], help_text='Type of review', max_length=20)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(blank=True, help_text='Review title', max_length=200)),
                ('comment', models.TextField(help_text='Detailed review comment')),
                ('communication_rating', models.PositiveIntegerField(blank=True, help_text='Communication rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.PositiveIntegerField(blank=True, help_text='Quality of work rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('timeliness_rating', models.PositiveIntegerField(blank=True, help_text='Timeliness rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('professionalism_rating', models.PositiveIntegerField(blank=True, help_text='Professionalism rating', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_public', models.BooleanField(default=True, help_text='Whether the review is public')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the review is verified')),
                ('response', models.TextField(blank=True, help_text='Response to the review')),
                ('response_date', models.DateTimeField(blank=True, help_text='Date of response', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Skill name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Skill description')),
                ('category', models.CharField(choices=[('technology', 'Technology'), ('design', 'Design'), ('marketing', 'Marketing'), ('writing', 'Writing'), ('translation', 'Translation'), ('administration', 'Administration'), ('customer_service', 'Customer Service'), ('sales', 'Sales'), ('education', 'Education'), ('healthcare', 'Healthcare'), ('legal', 'Legal'), ('finance', 'Finance'), ('construction', 'Construction'), ('transportation', 'Transportation'), ('hospitality', 'Hospitality'), ('other', 'Other')], default='other', help_text='Skill category', max_length=30)),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50)),
                ('color', models.CharField(blank=True, help_text='Color code for the skill', max_length=7)),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of users with this skill')),
                ('job_count', models.PositiveIntegerField(default=0, help_text='Number of jobs requiring this skill')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the skill is active')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the skill is verified')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', help_text='User proficiency level in this skill', max_length=20)),
                ('years_of_experience', models.PositiveIntegerField(blank=True, help_text='Years of experience with this skill', null=True)),
                ('verification_status', models.CharField(choices=[('unverified', 'Unverified'), ('pending', 'Pending Verification'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='unverified', help_text='Verification status of the skill', max_length=20)),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the skill was verified', null=True)),
                ('description', models.TextField(blank=True, help_text='User description of their experience with this skill')),
                ('portfolio_links', models.JSONField(default=list, help_text='Links to portfolio items demonstrating this skill')),
                ('certifications', models.JSONField(default=list, help_text='List of certifications for this skill')),
                ('endorsement_count', models.PositiveIntegerField(default=0, help_text='Number of endorsements for this skill')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skill', models.ForeignKey(help_text='Skill that the user has', on_delete=django.db.models.deletion.CASCADE, related_name='user_skills', to='api.skill')),
                ('user', models.ForeignKey(help_text='User who has this skill', on_delete=django.db.models.deletion.CASCADE, related_name='user_skills', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, help_text='User who verified this skill', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Skill',
                'verbose_name_plural': 'User Skills',
                'ordering': ['-proficiency_level', '-endorsement_count'],
            },
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['category'], name='api_skill_categor_a59198_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['is_active'], name='api_skill_is_acti_e8f3ab_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['usage_count'], name='api_skill_usage_c_1d0fa6_idx'),
        ),
        migrations.AddIndex(
            model_name='skill',
            index=models.Index(fields=['job_count'], name='api_skill_job_cou_df49ac_idx'),
        ),
        migrations.AddField(
            model_name='review',
            name='job',
            field=models.ForeignKey(help_text='Job being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.job'),
        ),
        migrations.AddField(
            model_name='review',
            name='reviewed_user',
            field=models.ForeignKey(help_text='User being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='review',
            name='reviewer',
            field=models.ForeignKey(help_text='User giving the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='paymentmethod',
            name='user',
            field=models.ForeignKey(help_text='User who owns this payment method', on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='job',
            field=models.ForeignKey(blank=True, help_text='Related job', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.job'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payee',
            field=models.ForeignKey(help_text='User receiving the payment', on_delete=django.db.models.deletion.CASCADE, related_name='payments_received', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='payer',
            field=models.ForeignKey(help_text='User making the payment', on_delete=django.db.models.deletion.CASCADE, related_name='payments_made', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_method',
            field=models.ForeignKey(blank=True, help_text='Payment method used', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.paymentmethod'),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(help_text='User receiving the notification', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='location',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Parent location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='api.location'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='job',
            field=models.ForeignKey(help_text='Job being applied for', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='api.job'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='worker',
            field=models.ForeignKey(help_text='Worker applying for the job', on_delete=django.db.models.deletion.CASCADE, related_name='job_applications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='job',
            name='assigned_worker',
            field=models.ForeignKey(blank=True, help_text='Worker assigned to the job', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_jobs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='job',
            name='category',
            field=models.ForeignKey(help_text='Job category', on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='api.jobcategory'),
        ),
        migrations.AddField(
            model_name='job',
            name='client',
            field=models.ForeignKey(help_text='Client who posted the job', on_delete=django.db.models.deletion.CASCADE, related_name='posted_jobs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='userskill',
            index=models.Index(fields=['user'], name='api_userski_user_id_9f687e_idx'),
        ),
        migrations.AddIndex(
            model_name='userskill',
            index=models.Index(fields=['skill'], name='api_userski_skill_i_272b15_idx'),
        ),
        migrations.AddIndex(
            model_name='userskill',
            index=models.Index(fields=['proficiency_level'], name='api_userski_profici_db3ee2_idx'),
        ),
        migrations.AddIndex(
            model_name='userskill',
            index=models.Index(fields=['verification_status'], name='api_userski_verific_ac7221_idx'),
        ),
        migrations.AddIndex(
            model_name='userskill',
            index=models.Index(fields=['endorsement_count'], name='api_userski_endorse_c64a8c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('user', 'skill')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewer'], name='api_review_reviewe_e228b5_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewed_user'], name='api_review_reviewe_300d96_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['job'], name='api_review_job_id_d841d6_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='api_review_rating_7645b3_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['review_type'], name='api_review_review__cfb01a_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='api_review_created_24e07e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('reviewer', 'reviewed_user', 'job')},
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['user'], name='api_payment_user_id_024b89_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['payment_type'], name='api_payment_payment_e6136b_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['provider'], name='api_payment_provide_1613a6_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['is_default'], name='api_payment_is_defa_cfeaf3_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_id'], name='api_payment_payment_df1c15_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='api_payment_status_c61efc_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_type'], name='api_payment_payment_ad5f22_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payer'], name='api_payment_payer_i_3e71ae_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payee'], name='api_payment_payee_i_53930f_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['created_at'], name='api_payment_created_c18666_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['external_transaction_id'], name='api_payment_externa_d52be6_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user'], name='api_notific_user_id_145217_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='api_notific_notific_574e18_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['is_read'], name='api_notific_is_read_9d379e_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['priority'], name='api_notific_priorit_c4e23f_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='api_notific_created_238c70_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['location_type'], name='api_locatio_locatio_1fdaf8_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['country_code'], name='api_locatio_country_ae8190_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['is_active'], name='api_locatio_is_acti_3c0e36_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['latitude', 'longitude'], name='api_locatio_latitud_670fa5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('name', 'location_type', 'parent')},
        ),
        migrations.AddIndex(
            model_name='jobapplication',
            index=models.Index(fields=['status'], name='api_jobappl_status_0393cd_idx'),
        ),
        migrations.AddIndex(
            model_name='jobapplication',
            index=models.Index(fields=['created_at'], name='api_jobappl_created_401000_idx'),
        ),
        migrations.AddIndex(
            model_name='jobapplication',
            index=models.Index(fields=['job', 'worker'], name='api_jobappl_job_id_709c0c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='jobapplication',
            unique_together={('job', 'worker')},
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['status'], name='api_job_status_12e2d1_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['job_type'], name='api_job_job_typ_0dc302_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['category'], name='api_job_categor_a54bcf_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['is_remote'], name='api_job_is_remo_18c46f_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['budget_min', 'budget_max'], name='api_job_budget__53c9fc_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['created_at'], name='api_job_created_f81cf5_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['is_featured'], name='api_job_is_feat_28414a_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['is_urgent'], name='api_job_is_urge_174a34_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='api_user_user_ty_770023_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='api_user_is_veri_4dbd55_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active_worker'], name='api_user_is_acti_e34ce3_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['country', 'city'], name='api_user_country_69c41f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['average_rating'], name='api_user_average_1e7849_idx'),
        ),
    ]
